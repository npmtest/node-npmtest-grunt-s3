{"/home/travis/build/npmtest/node-npmtest-grunt-s3/test.js":"/* istanbul instrument in package npmtest_grunt_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/lib.npmtest_grunt_s3.js":"/* istanbul instrument in package npmtest_grunt_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_s3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_s3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-s3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_s3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_s3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_s3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_s3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_s3.__dirname + '/lib.npmtest_grunt_s3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/node_modules/grunt-s3/tasks/s3.js":"/*jshint esnext:true*/\n/*globals module:true, require:true, process:true*/\n\n/*\n * Grunt Task File\n * ---------------\n *\n * Task: S3\n * Description: Move files to and from s3\n * Dependencies: knox, underscore.deferred\n *\n */\n\nvar s3 = require('./lib/s3');\n\nvar exportFn = function (grunt) {\n  var S3Task = require('./lib/S3Task');\n\n  // If grunt is not provided, then expose internal API.\n  if (typeof grunt !== 'object') {\n    return {\n      s3: s3,\n      S3Task: S3Task\n    };\n  }\n\n  s3 = s3.init(grunt);\n\n  /**\n   * Transfer files to/from s3.\n   *\n   * Uses global s3 grunt config.\n   */\n  grunt.registerMultiTask('s3', 'Publishes files to s3.', function () {\n    var task = new S3Task(this, s3);\n\n    task.run();\n  });\n};\n\nexportFn.init = function (grunt) {\n  return s3.init(grunt);\n};\n\nmodule.exports = exportFn;\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/node_modules/grunt-s3/tasks/lib/s3.js":"/*jshint esnext:true*/\n/*globals module:true, require:true, process:true*/\n\n/**\n * Module dependencies.\n */\n\n// Core.\nvar util = require('util');\nvar crypto = require('crypto');\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\nvar zlib = require('zlib');\n\n// Npm.\nvar knox = require('knox');\nvar mime = require('mime');\nvar deferred = require('underscore.deferred');\nvar Tempfile = require('temporary/lib/file');\n\n// Local\nvar common = require('./common');\n\n// Avoid warnings.\nvar existsSync = ('existsSync' in fs) ? fs.existsSync : path.existsSync;\n\n/**\n * Success/error messages.\n */\nvar MSG_UPLOAD_SUCCESS = '↗'.blue + ' Uploaded: %s (%s)';\nvar MSG_DOWNLOAD_SUCCESS = '↙'.yellow + ' Downloaded: %s (%s)';\nvar MSG_DELETE_SUCCESS = '✗'.red + ' Deleted: %s';\nvar MSG_COPY_SUCCESS = '→'.cyan + ' Copied: %s to %s';\nvar MSG_SKIP_SUCCESS = '→'.cyan + ' File Exists, skipped: %s';\nvar MSG_SKIP_MATCHES = '→'.cyan + ' File Matches, skipped: %s';\nvar MSG_SKIP_OLDER = '→'.cyan + ' File is Old, skipped: %s';\n\nvar MSG_UPLOAD_DEBUG = '↗'.blue + ' Upload: ' + '%s'.grey + ' to ' + '%s:%s'.cyan;\nvar MSG_DOWNLOAD_DEBUG = '↙'.yellow + ' Download: ' + '%s:%s'.cyan + ' to ' + '%s'.grey;\nvar MSG_DELETE_DEBUG = '✗'.red + ' Delete: ' + '%s:%s'.cyan;\nvar MSG_COPY_DEBUG = '→'.cyan + ' Copy: ' + '%s'.cyan + ' to ' + '%s:%s'.cyan;\nvar MSG_SKIP_DEBUG = '→'.cyan + ' Sync: ' + '%s:%s'.cyan;\n\nvar MSG_ERR_NOT_FOUND = '¯\\\\_(ツ)_/¯ File not found: %s';\nvar MSG_ERR_UPLOAD = 'Upload error: %s (%s)';\nvar MSG_ERR_DOWNLOAD = 'Download error: %s (%s)';\nvar MSG_ERR_DELETE = 'Delete error: %s (%s)';\nvar MSG_ERR_COPY = 'Copy error: %s to %s';\nvar MSG_ERR_CHECKSUM = '%s error: expected hash: %s but found %s for %s';\n\nexports.init = function (grunt) {\n  var async = grunt.util.async;\n  var _ = grunt.util._;\n\n  _.mixin(deferred);\n\n  var exports = {};\n\n  /**\n   * Create an Error object based off of a formatted message. Arguments\n   * are identical to those of util.format.\n   *\n   * @param {String} Format.\n   * @param {...string|number} Values to insert into Format.\n   * @returns {Error}\n   */\n  var makeError = exports.makeError = function () {\n    var msg = util.format.apply(util, _.toArray(arguments));\n    return new Error(msg);\n  };\n\n  var makeOptions = exports.makeOptions = function(opts) {\n    var options = _.clone(opts || {}, true);\n\n    return options;\n  };\n\n  /**\n   * Create an s3 client. Returns an Knox instance.\n   *\n   * @param {Object} Format.\n   * @returns {Object}\n   */\n  var makeClient = exports.makeClient = function(options) {\n    return knox.createClient(_.pick(options, [\n      'region', 'endpoint', 'port', 'key', 'secret', 'access', 'bucket', 'secure', 'headers', 'style'\n    ]));\n  };\n\n  /**\n   * Publishes the local file at src to the s3 dest.\n   *\n   * Verifies that the upload was successful by comparing an md5 checksum of\n   * the local and remote versions.\n   *\n   * @param {String} src The local path to the file to upload.\n   * @param {String} dest The s3 path, relative to the bucket, to which the src\n   *     is uploaded.\n   * @param {Object} [options] An object containing options which override any\n   *     option declared in the global s3 config.\n   */\n  exports.put = exports.upload = function (src, dest, opts) {\n    var dfd = new _.Deferred();\n    var options = makeOptions(opts);\n    var prettySrc = path.relative(process.cwd(), src);\n\n    // Make sure the local file exists.\n    if (!existsSync(src)) {\n      return dfd.reject(makeError(MSG_ERR_NOT_FOUND, prettySrc));\n    }\n\n    var headers = options.headers || {};\n\n    if (options.access) {\n      headers['x-amz-acl'] = options.access;\n    }\n\n    // Pick out the configuration options we need for the client.\n    var client = makeClient(options);\n\n    if (options.debug) {\n      return dfd.resolve(util.format(MSG_UPLOAD_DEBUG, prettySrc, client.bucket, dest)).promise();\n    }\n\n    // Encapsulate this logic to make it easier to gzip the file first if\n    // necesssary.\n    var upload = function (cb) {\n      cb = cb || function () {};\n\n      // Upload the file to s3.\n      client.putFile(src, dest, headers, function (err, res) {\n        // If there was an upload error or any status other than a 200, we\n        // can assume something went wrong.\n        if (err || res.statusCode !== 200) {\n          cb(makeError(MSG_ERR_UPLOAD, prettySrc, err || res.statusCode));\n        }\n        else {\n          // Read the local file so we can get its md5 hash.\n          fs.readFile(src, function (err, data) {\n            if (err) {\n              cb(makeError(MSG_ERR_UPLOAD, prettySrc, err));\n            }\n            else {\n              // The etag head in the response from s3 has double quotes around\n              // it. Strip them out.\n              var remoteHash = res.headers.etag.replace(/\"/g, '');\n\n              // Get an md5 of the local file so we can verify the upload.\n              var localHash = crypto.createHash('md5').update(data).digest('hex');\n\n              if (remoteHash === localHash) {\n                var msg = util.format(MSG_UPLOAD_SUCCESS, prettySrc, localHash);\n                cb(null, msg);\n              }\n              else {\n                cb(makeError(MSG_ERR_CHECKSUM, 'Upload', localHash, remoteHash, prettySrc));\n              }\n            }\n          });\n        }\n        res.resume();\n      });\n    };\n\n    // prepare gzip exclude option\n    var gzipExclude = options.gzipExclude || [];\n    if (!_.isArray(gzipExclude)) {\n      gzipExclude = [];\n    }\n\n    // If gzip is enabled and file not in gzip exclude array,\n    // gzip the file into a temp file and then perform the upload.\n    if (options.gzip && gzipExclude.indexOf(path.extname(src)) === -1) {\n      headers['Content-Encoding'] = 'gzip';\n      headers['Content-Type'] = headers['Content-Type'] || mime.lookup(src);\n\n      var charset = mime.charsets.lookup(headers['Content-Type'], null);\n      if (charset) {\n        headers['Content-Type'] += '; charset=' + charset;\n      }\n\n      var tmp = new Tempfile();\n      var input = fs.createReadStream(src);\n      var output = fs.createWriteStream(tmp.path);\n\n      // Gzip the file and upload when done.\n      input.pipe(zlib.createGzip()).pipe(output)\n        .on('error', function (err) {\n          dfd.reject(makeError(MSG_ERR_UPLOAD, prettySrc, err));\n        })\n        .on('close', function () {\n          // Update the src to point to the newly created .gz file.\n          src = tmp.path;\n          prettySrc += ' (gzip)';\n          upload(function (err, msg) {\n            // Clean up the temp file.\n            tmp.unlinkSync();\n\n            if (err) {\n              dfd.reject(err);\n            }\n            else {\n              dfd.resolve(msg);\n            }\n          });\n        });\n    }\n    else {\n      // No need to gzip so go ahead and upload the file.\n      upload(function (err, msg) {\n        if (err) {\n          dfd.reject(err);\n        }\n        else {\n          dfd.resolve(msg);\n        }\n      });\n    }\n\n    return dfd.promise();\n  };\n\n  /**\n   * Download a file from s3.\n   *\n   * Verifies that the download was successful by downloading the file and\n   * comparing an md5 checksum of the local and remote versions.\n   *\n   * @param {String} src The s3 path, relative to the bucket, of the file being\n   *     downloaded.\n   * @param {String} dest The local path where the download will be saved.\n   * @param {Object} [options] An object containing options which override any\n   *     option declared in the global s3 config.\n   */\n  exports.pull = exports.download = function (src, dest, opts) {\n    var dfd = new _.Deferred();\n    var options = makeOptions(opts);\n\n    // Pick out the configuration options we need for the client.\n    var client = makeClient(options);\n\n    if (options.debug) {\n      return dfd.resolve(util.format(MSG_DOWNLOAD_DEBUG, client.bucket, src, path.relative(process.cwd(), dest))).promise();\n    }\n\n    // Create a local stream we can write the downloaded file to.\n    var file = fs.createWriteStream(dest);\n\n    // Upload the file to s3.\n    client.getFile(src, function (err, res) {\n      // If there was an upload error or any status other than a 200, we\n      // can assume something went wrong.\n      if (err || res.statusCode !== 200) {\n        return dfd.reject(makeError(MSG_ERR_DOWNLOAD, src, err || res.statusCode));\n      }\n\n      res\n        .on('data', function (chunk) {\n          file.write(chunk);\n        })\n        .on('error', function (err) {\n          return dfd.reject(makeError(MSG_ERR_DOWNLOAD, src, err));\n        })\n        .on('end', function () {\n          file.end();\n\n          // Read the local file so we can get its md5 hash.\n          fs.readFile(dest, function (err, data) {\n            if (err) {\n              return dfd.reject(makeError(MSG_ERR_DOWNLOAD, src, err));\n            }\n            else {\n              // The etag head in the response from s3 has double quotes around\n              // it. Strip them out.\n              var remoteHash = res.headers.etag.replace(/\"/g, '');\n\n              // Get an md5 of the local file so we can verify the download.\n              var localHash = crypto.createHash('md5').update(data).digest('hex');\n\n              if (remoteHash === localHash) {\n                var msg = util.format(MSG_DOWNLOAD_SUCCESS, src, localHash);\n                dfd.resolve(msg);\n              }\n              else {\n                dfd.reject(makeError(MSG_ERR_CHECKSUM, 'Download', localHash, remoteHash, src));\n              }\n            }\n          });\n        });\n    });\n\n    return dfd.promise();\n  };\n\n  /**\n   * Copy a file from s3 to s3.\n   *\n   * @param {String} src The s3 path, including the bucket, to the file to\n   *     copy.\n   * @param {String} dest The s3 path, relative to the bucket, to the file to\n   *     create.\n   * @param {Object} [options] An object containing options which override any\n   *     option declared in the global s3 config.\n   */\n  exports.copy = function (src, dest, opts) {\n    var dfd = new _.Deferred();\n    var options = makeOptions(opts);\n\n    // Pick out the configuration options we need for the client.\n    var client = makeClient(options);\n\n    if (options.debug) {\n      return dfd.resolve(util.format(MSG_COPY_DEBUG, src, client.bucket, dest)).promise();\n    }\n\n    var headers = {\n      'Content-Length': 0,\n      'x-amz-copy-source': src\n    };\n\n    if (options.headers) {\n      _(headers).extend(options.headers);\n      headers['x-amz-metadata-directive'] = 'REPLACE';\n    }\n\n    // Copy the src file to dest.\n    var req = client.put(dest, headers);\n\n    req.on('response', function (res) {\n      if (res.statusCode !== 200) {\n        dfd.reject(makeError(MSG_ERR_COPY, src, dest));\n      }\n      else {\n        dfd.resolve(util.format(MSG_COPY_SUCCESS, src, dest));\n      }\n    });\n\n    return dfd.promise();\n  };\n\n  /**\n   * Delete a file from s3.\n   *\n   * @param {String} src The s3 path, relative to the bucket, to the file to\n   *     delete.\n   * @param {Object} [options] An object containing options which override any\n   *     option declared in the global s3 config.\n   */\n  exports.del = function (src, opts) {\n    var dfd = new _.Deferred();\n    var options = makeOptions(opts);\n\n    // Pick out the configuration options we need for the client.\n    var client = makeClient(options);\n\n    if (options.debug) {\n      return dfd.resolve(util.format(MSG_DELETE_DEBUG, client.bucket, src)).promise();\n    }\n\n    // Upload the file to this endpoint.\n    client.deleteFile(src, function (err, res) {\n      if (err || res.statusCode !== 204) {\n        dfd.reject(makeError(MSG_ERR_DELETE, src, err || res.statusCode));\n      }\n      else {\n        dfd.resolve(util.format(MSG_DELETE_SUCCESS, src));\n      }\n    });\n\n    return dfd.promise();\n  };\n\n\n\n  /**\n   * Publishes the local file at src to the s3 dest, but only after checking if the file exists or doesn't match.\n   *\n   * Verifies that the upload was successful by comparing an md5 checksum of\n   * the local and remote versions. Also checks if the file exists first, both by filename or by hash and mtime\n   *\n   * @param {String} src The local path to the file to upload.\n   * @param {String} dest The s3 path, relative to the bucket, to which the src\n   *     is uploaded.\n   * @param {Object} [options] An object containing options which override any\n   *     option declared in the global s3 config.\n   */\n  exports.sync = function (src, dest, opts) {\n    var dfd = new _.Deferred();\n    var options = makeOptions(opts);\n    var prettySrc = path.relative(process.cwd(), src);\n\n    // Pick out the configuration options we need for the client.\n    var client = makeClient(options);\n\n    if (options.debug) {\n      return dfd.resolve(util.format(MSG_SKIP_DEBUG, client.bucket, prettySrc)).promise();\n    }\n\n    // Check for the file on s3\n    // verify was truthy, so we need to make sure that this file is actually the file it thinks it is\n    client.headFile( dest, function(err, res) {\n      var upload;\n\n      // If the file was not found, then we should be able to continue with a normal upload procedure\n      if (res && res.statusCode === 404) {\n        upload = exports.upload( src, dest, opts);\n        // pass through the dfd state\n        return upload.then( dfd.resolve, dfd.reject );\n      }\n\n      if (!res || err || res.statusCode !== 200 ) {\n        return dfd.reject(makeError(MSG_ERR_DOWNLOAD, prettySrc, err || res.statusCode));\n      }\n\n      // we do not wish to overwrite a file that exists by verifying we have a newer one in place\n      if( !options.verify ) {\n        // the file exists so do nothing with that\n        return dfd.resolve(util.format(MSG_SKIP_SUCCESS, prettySrc));\n      }\n\n      // the file exists so let's check to make sure it's the right file, if not, we'll update it\n      // Read the local file so we can get its md5 hash.\n      fs.readFile(src, function (err, data) {\n        var remoteHash, localHash;\n\n        if (err) {\n          return dfd.reject(makeError(MSG_ERR_UPLOAD, prettySrc, err));\n        }\n        // The etag head in the response from s3 has double quotes around\n        // it. Strip them out.\n        remoteHash = res.headers.etag.replace(/\"/g, '');\n\n        // Get an md5 of the local file so we can verify the upload.\n        localHash = crypto.createHash('md5').update(data).digest('hex');\n\n        if (remoteHash === localHash) {\n          // the file exists and is the same so do nothing with that\n          return dfd.resolve(util.format(MSG_SKIP_MATCHES, prettySrc));\n        }\n\n        fs.stat( src, function(err, stats) {\n          var remoteWhen, localWhen, upload;\n\n          if (err) {\n            return dfd.reject(makeError(MSG_ERR_UPLOAD, prettySrc, err));\n          }\n\n          // which one is newer? if local is newer, we should upload it\n          remoteWhen = new Date(res.headers['last-modified'] || \"0\"); // earliest date possible if no header is returned\n          localWhen = new Date(stats.mtime || \"1\"); // make second earliest date possible if mtime isn't set\n\n          if ( localWhen <= remoteWhen ) {\n            // Remote file was older\n            return dfd.resolve(util.format(MSG_SKIP_OLDER, prettySrc));\n          }\n\n          // default is that local is newer, only upload when it is\n          upload = exports.upload( src, dest, opts);\n          // pass through the dfd state\n          upload.then( dfd.resolve, dfd.reject );\n        });\n      });\n    }).end();\n\n    return dfd.promise();\n  };\n\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/node_modules/grunt-s3/tasks/lib/common.js":"\nvar crypto = require('crypto');\nvar fs = require('fs');\n\n/**\n * Get the md5 hash of a file.\n * @param  {String} path Path to file.\n * @return {String} md5 of file in hex format.\n */\nexports.hashFile = function(path) {\n  return crypto.createHash('md5').update(fs.readFileSync(path)).digest('hex');\n};","/home/travis/build/npmtest/node-npmtest-grunt-s3/node_modules/grunt-s3/Gruntfile.js":"var path = require('path');\n\nmodule.exports = function (grunt) {\n\n  grunt.initConfig({\n    jshint: ['tasks/**/*.js'],\n    nodeunit: {\n      all: ['test/upload.js', 'test/download.js', 'test/delete.js', 'test/s3Task.js', 'test/sync.js']\n    },\n    clean: [ 's3/'],\n    s3: {\n      options: {\n        key: 'abc',\n        secret: 'def',\n        bucket: 'test',\n        endpoint: '127.0.0.1',\n        port: 1337,\n        secure: false,\n        access: 'public-read',\n        style: 'path'\n      },\n      test: {\n        options: {}\n      },\n      test_options: {\n        options: {\n          key: 'custom'\n        }\n      },\n      test_S3Task: {\n        upload: [{\n          src: path.join(process.cwd(), 'test', 'files', '**', '*.txt'),\n          rel: path.join(process.cwd(), 'test', 'files'),\n          options: {\n            bucket: 'overridden'\n          }\n        }]\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n\n  grunt.registerTask('test', ['clean', 'jshint', 'nodeunit']);\n\n  grunt.loadTasks(__dirname + '/tasks');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-s3/node_modules/grunt-s3/tasks/lib/S3Task.js":"var path = require('path');\n\nvar grunt = require('grunt');\nvar _ = grunt.util._;\nvar async = grunt.util.async;\n\nvar S3Task = function (origTask, s3) {\n  this._origTask = origTask;\n  this.s3 = s3;\n};\n\nS3Task.prototype = {\n  run: function () {\n    var self = this;\n    var s3 = this.s3;\n    var done = this._origTask.async();\n    var config = this.getConfig();\n    var transfers = [];\n\n    if (config.debug) {\n      grunt.log.writeln('Running in debug mode, no transfers will be made'.yellow);\n      grunt.log.writeln();\n    }\n\n    config.upload.forEach(function (upload) {\n      var uploadFiles = self._parseUploadFiles(upload, config);\n\n      uploadFiles.forEach(function (uploadFile) {\n        transfers.push(s3.upload.bind(s3, uploadFile.file, uploadFile.dest, uploadFile.upload));\n      });\n    });\n\n    config.sync.forEach(function (sync) {\n      var syncFiles = self._parseUploadFiles(sync, config);\n\n      syncFiles.forEach(function (syncFile) {\n        transfers.push(s3.sync.bind(s3, syncFile.file, syncFile.dest, syncFile.upload));\n      });\n    });\n\n    config.download.forEach(function (download) {\n      transfers.push(s3.download.bind(s3, download.src, download.dest, _(download).defaults(config)));\n    });\n\n    config.del.forEach(function (del) {\n      transfers.push(s3.del.bind(s3, del.src, _(del).defaults(config)));\n    });\n\n    config.copy.forEach(function (copy) {\n      transfers.push(s3.copy.bind(s3, copy.src, copy.dest, _(copy).defaults(config)));\n    });\n\n    var total = transfers.length;\n    var errors = 0;\n\n    var eachTransfer = config.maxOperations > 0 ?\n      async.forEachLimit.bind(async,transfers,config.maxOperations) :\n      async.forEach.bind(async,transfers);\n\n    eachTransfer(function (transferFn, completed){\n      var transfer = transferFn();\n\n      transfer.done(function (msg) {\n        grunt.log.ok(msg);\n        completed();\n      });\n\n      transfer.fail(function (msg) {\n        grunt.log.error(msg);\n        ++errors;\n        completed();\n      });\n\n    }, function () {\n      done(!errors);\n    });\n  },\n\n  _parseUploadFiles: function (upload, config) {\n    // Expand list of files to upload.\n    var files = grunt.file.expand({ filter: 'isFile' }, upload.src);\n    var destPath = grunt.template.process(upload.dest || '');\n\n    return _.map(files, function (file) {\n      file = path.resolve(file);\n      upload.src = path.resolve(grunt.template.process(upload.src));\n\n      // Put the key, secret and bucket information into the upload for knox.\n      var fileConfig = _.extend({}, config, upload.options || {});\n\n      // If there is only 1 file and it matches the original file wildcard,\n      // we know this is a single file transfer. Otherwise, we need to build\n      // the destination.\n      var dest;\n      if (files.length === 1 && file === upload.src) {\n        dest = destPath;\n      }\n      else {\n        if (upload.rel) {\n          dest = path.join(destPath, path.relative(grunt.file.expand({ filter: \"isDirectory\" }, upload.rel)[0], file));\n        }\n        else {\n          dest = path.join(destPath, path.basename(file));\n        }\n      }\n\n      if (config.encodePaths === true) {\n        dest = encodeURIComponent(dest);\n      }\n\n      dest = dest.replace(/\\\\/g, '/');\n\n      return {\n        file: file,\n        dest: dest,\n        upload: fileConfig\n      };\n    });\n  },\n\n  /**\n   * Return the config, allow for arbitrary options that don't originate\n   * from grunt.\n   *\n   * @param  {Object=} optOptions optionally define an options object.\n   * @param  {Object=} optData optionally define file actions,\n   *   will ignore defaults.\n   * @return {Object} A normalized configuration.\n   */\n  getConfig: function (optOptions, optData) {\n    // Grab the options for this task.\n    var opts = optOptions || this._origTask.options();\n\n    var defaultOpts = {\n      key: process.env.AWS_ACCESS_KEY_ID,\n      secret: process.env.AWS_SECRET_ACCESS_KEY,\n      debug: false,\n      verify: false,\n      maxOperations: 0,\n      encodePaths: false\n    };\n\n    // Grab the actions to perform from the task data, default to empty arrays\n    var fileActions = optData || this._origTask.data;\n    var defaultFileActions = {\n      upload: [],\n      download: [],\n      del: [],\n      copy: [],\n      sync: []\n    };\n\n    // Combine the options and fileActions as the config\n    return _.extend({}, defaultOpts, defaultFileActions, opts, fileActions);\n  }\n};\n\nmodule.exports = S3Task;\n"}